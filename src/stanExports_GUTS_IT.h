// Generated by rstantools.  Do not edit by hand.

/*
    BeeGUTS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BeeGUTS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BeeGUTS.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_GUTS_IT_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 182> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 182, column 2 to column 20)",
  " (in 'string', line 183, column 2 to column 35)",
  " (in 'string', line 186, column 2 to column 56)",
  " (in 'string', line 187, column 2 to column 56)",
  " (in 'string', line 188, column 2 to column 33)",
  " (in 'string', line 189, column 2 to column 31)",
  " (in 'string', line 190, column 2 to column 31)",
  " (in 'string', line 191, column 2 to column 50)",
  " (in 'string', line 192, column 2 to column 62)",
  " (in 'string', line 193, column 2 to column 24)",
  " (in 'string', line 194, column 2 to column 28)",
  " (in 'string', line 226, column 0 to column 33)",
  " (in 'string', line 227, column 0 to column 33)",
  " (in 'string', line 228, column 0 to column 38)",
  " (in 'string', line 230, column 0 to column 28)",
  " (in 'string', line 196, column 4 to column 58)",
  " (in 'string', line 195, column 24 to line 197, column 3)",
  " (in 'string', line 195, column 2 to line 197, column 3)",
  " (in 'string', line 198, column 2 to column 25)",
  " (in 'string', line 200, column 5 to column 46)",
  " (in 'string', line 202, column 6 to column 199)",
  " (in 'string', line 205, column 7 to column 118)",
  " (in 'string', line 204, column 26 to line 206, column 6)",
  " (in 'string', line 204, column 5 to line 206, column 6)",
  " (in 'string', line 208, column 7 to column 114)",
  " (in 'string', line 207, column 26 to line 209, column 6)",
  " (in 'string', line 207, column 5 to line 209, column 6)",
  " (in 'string', line 210, column 5 to column 97)",
  " (in 'string', line 203, column 35 to line 211, column 5)",
  " (in 'string', line 203, column 4 to line 211, column 5)",
  " (in 'string', line 199, column 21 to line 212, column 3)",
  " (in 'string', line 199, column 2 to line 212, column 3)",
  " (in 'string', line 235, column 5 to column 69)",
  " (in 'string', line 237, column 5 to column 70)",
  " (in 'string', line 239, column 5 to column 78)",
  " (in 'string', line 241, column 5 to column 139)",
  " (in 'string', line 234, column 34 to line 242, column 4)",
  " (in 'string', line 234, column 3 to line 242, column 4)",
  " (in 'string', line 232, column 19 to line 243, column 1)",
  " (in 'string', line 232, column 0 to line 243, column 1)",
  " (in 'string', line 215, column 2 to column 70)",
  " (in 'string', line 216, column 2 to column 38)",
  " (in 'string', line 218, column 4 to column 135)",
  " (in 'string', line 217, column 21 to line 219, column 3)",
  " (in 'string', line 217, column 2 to line 219, column 3)",
  " (in 'string', line 129, column 0 to column 24)",
  " (in 'string', line 132, column 0 to column 20)",
  " (in 'string', line 133, column 6 to column 12)",
  " (in 'string', line 133, column 0 to column 31)",
  " (in 'string', line 136, column 0 to column 24)",
  " (in 'string', line 137, column 6 to column 16)",
  " (in 'string', line 137, column 0 to column 28)",
  " (in 'string', line 138, column 6 to column 16)",
  " (in 'string', line 138, column 0 to column 29)",
  " (in 'string', line 140, column 6 to column 12)",
  " (in 'string', line 140, column 0 to column 34)",
  " (in 'string', line 141, column 6 to column 12)",
  " (in 'string', line 141, column 0 to column 34)",
  " (in 'string', line 144, column 0 to column 25)",
  " (in 'string', line 145, column 6 to column 17)",
  " (in 'string', line 145, column 0 to column 29)",
  " (in 'string', line 146, column 6 to column 17)",
  " (in 'string', line 146, column 0 to column 29)",
  " (in 'string', line 147, column 6 to column 17)",
  " (in 'string', line 147, column 0 to column 31)",
  " (in 'string', line 149, column 6 to column 12)",
  " (in 'string', line 149, column 0 to column 34)",
  " (in 'string', line 150, column 6 to column 12)",
  " (in 'string', line 150, column 0 to column 34)",
  " (in 'string', line 153, column 0 to column 18)",
  " (in 'string', line 154, column 0 to column 16)",
  " (in 'string', line 155, column 0 to column 18)",
  " (in 'string', line 156, column 0 to column 16)",
  " (in 'string', line 159, column 0 to column 12)",
  " (in 'string', line 160, column 0 to column 12)",
  " (in 'string', line 161, column 0 to column 13)",
  " (in 'string', line 162, column 3 to column 20)",
  " (in 'string', line 164, column 3 to column 21)",
  " (in 'string', line 165, column 3 to column 19)",
  " (in 'string', line 166, column 3 to column 22)",
  " (in 'string', line 167, column 3 to column 22)",
  " (in 'string', line 170, column 2 to column 28)",
  " (in 'string', line 171, column 8 to column 19)",
  " (in 'string', line 171, column 2 to column 37)",
  " (in 'string', line 172, column 8 to column 18)",
  " (in 'string', line 172, column 2 to column 35)",
  " (in 'string', line 173, column 2 to column 16)",
  " (in 'string', line 175, column 4 to column 70)",
  " (in 'string', line 176, column 4 to column 56)",
  " (in 'string', line 177, column 4 to column 68)",
  " (in 'string', line 178, column 4 to column 54)",
  " (in 'string', line 174, column 21 to line 179, column 3)",
  " (in 'string', line 174, column 2 to line 179, column 3)",
  " (in 'string', line 183, column 8 to column 21)",
  " (in 'string', line 188, column 8 to column 17)",
  " (in 'string', line 189, column 8 to column 9)",
  " (in 'string', line 190, column 9 to column 20)",
  " (in 'string', line 190, column 22 to column 23)",
  " (in 'string', line 191, column 27 to column 38)",
  " (in 'string', line 192, column 27 to column 38)",
  " (in 'string', line 226, column 6 to column 17)",
  " (in 'string', line 227, column 6 to column 17)",
  " (in 'string', line 228, column 6 to column 17)",
  " (in 'string', line 230, column 7 to column 18)",
  " (in 'string', line 26, column 6 to column 14)",
  " (in 'string', line 27, column 6 to column 12)",
  " (in 'string', line 28, column 6 to column 19)",
  " (in 'string', line 29, column 6 to column 16)",
  " (in 'string', line 30, column 6 to column 17)",
  " (in 'string', line 31, column 6 to column 19)",
  " (in 'string', line 32, column 6 to column 20)",
  " (in 'string', line 33, column 6 to column 15)",
  " (in 'string', line 35, column 6 to column 31)",
  " (in 'string', line 37, column 17 to column 27)",
  " (in 'string', line 37, column 6 to column 27)",
  " (in 'string', line 39, column 6 to column 28)",
  " (in 'string', line 40, column 6 to column 20)",
  " (in 'string', line 42, column 6 to column 25)",
  " (in 'string', line 43, column 6 to column 36)",
  " (in 'string', line 44, column 6 to column 36)",
  " (in 'string', line 46, column 21 to column 40)",
  " (in 'string', line 46, column 6 to column 40)",
  " (in 'string', line 47, column 21 to column 33)",
  " (in 'string', line 47, column 6 to column 33)",
  " (in 'string', line 48, column 21 to column 31)",
  " (in 'string', line 48, column 6 to column 31)",
  " (in 'string', line 50, column 6 to column 15)",
  " (in 'string', line 52, column 8 to column 20)",
  " (in 'string', line 53, column 8 to column 17)",
  " (in 'string', line 55, column 8 to column 47)",
  " (in 'string', line 56, column 8 to column 34)",
  " (in 'string', line 57, column 22 to column 40)",
  " (in 'string', line 57, column 8 to column 40)",
  " (in 'string', line 58, column 31 to column 43)",
  " (in 'string', line 58, column 44 to column 64)",
  " (in 'string', line 58, column 29 to column 66)",
  " (in 'string', line 58, column 8 to column 66)",
  " (in 'string', line 59, column 31 to column 43)",
  " (in 'string', line 59, column 44 to column 64)",
  " (in 'string', line 59, column 29 to column 66)",
  " (in 'string', line 59, column 8 to column 66)",
  " (in 'string', line 60, column 8 to column 24)",
  " (in 'string', line 51, column 61 to line 61, column 7)",
  " (in 'string', line 51, column 6 to line 61, column 7)",
  " (in 'string', line 62, column 27 to column 74)",
  " (in 'string', line 62, column 6 to column 74)",
  " (in 'string', line 63, column 6 to column 23)",
  " (in 'string', line 25, column 60 to line 64, column 2)",
  " (in 'string', line 67, column 4 to column 23)",
  " (in 'string', line 69, column 4 to column 90)",
  " (in 'string', line 71, column 4 to column 26)",
  " (in 'string', line 66, column 86 to line 72, column 1)",
  " (in 'string', line 76, column 6 to line 77, column 58)",
  " (in 'string', line 75, column 56 to line 78, column 1)",
  " (in 'string', line 81, column 2 to column 53)",
  " (in 'string', line 80, column 56 to line 82, column 1)",
  " (in 'string', line 85, column 2 to column 52)",
  " (in 'string', line 84, column 57 to line 86, column 1)",
  " (in 'string', line 93, column 4 to column 23)",
  " (in 'string', line 95, column 4 to column 20)",
  " (in 'string', line 97, column 4 to column 23)",
  " (in 'string', line 98, column 11 to column 16)",
  " (in 'string', line 98, column 4 to column 50)",
  " (in 'string', line 99, column 11 to column 16)",
  " (in 'string', line 99, column 4 to column 57)",
  " (in 'string', line 100, column 4 to column 54)",
  " (in 'string', line 102, column 4 to column 155)",
  " (in 'string', line 104, column 4 to column 46)",
  " (in 'string', line 105, column 4 to column 18)",
  " (in 'string', line 91, column 39 to line 106, column 3)",
  " (in 'string', line 108, column 4 to column 21)",
  " (in 'string', line 109, column 4 to column 25)",
  " (in 'string', line 110, column 10 to column 18)",
  " (in 'string', line 110, column 4 to line 115, column 30)",
  " (in 'string', line 116, column 11 to column 19)",
  " (in 'string', line 116, column 4 to column 28)",
  " (in 'string', line 118, column 6 to column 37)",
  " (in 'string', line 117, column 25 to line 119, column 5)",
  " (in 'string', line 117, column 4 to line 119, column 5)",
  " (in 'string', line 120, column 4 to column 15)",
  " (in 'string', line 107, column 187 to line 121, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
int
find_interval_elem(const T0__& x, const T1__& sorted_arg__, const int&
                   start_ind, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
linearInterp(const T0__& t_x, const T1__& t_before, const T2__& t_after,
             const T3__& y_before, const T4__& y_after, std::ostream*
             pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic_2_lpdf(const T0__& y_hat, const T1__& mw, const T2__& beta,
                   std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic_2_lcdf(const T0__& y_hat, const T1__& mw, const T2__& beta,
                   std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic_2_lccdf(const T0__& y_hat, const T1__& mw, const T2__& beta,
                    std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>,-1,1>
TKTD_varIT(const T0__& t, const T1__& y_arg__, const std::vector<T2__>&
           theta, const std::vector<T3__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>,-1,-1>
solve_TKTD_varIT(const std::vector<T0__>& y0, const T1__& t0,
                 const std::vector<T2__>& ts, const std::vector<T3__>& theta,
                 const std::vector<double>& tconc, const std::vector<double>&
                 conc, const double& relTol, const double& absTol, const int&
                 maxSteps, std::ostream* pstream__);
struct TKTD_varIT_variadic2_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__,
                  T3__>,-1,1>
  operator()(const T0__& t, const T1__& y, std::ostream* pstream__,
             const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i) const {
    return TKTD_varIT(t, y, theta, x_r, x_i, pstream__);
  }
};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
int
find_interval_elem(const T0__& x, const T1__& sorted_arg__, const int&
                   start_ind, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& sorted = stan::math::to_ref(sorted_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int res = std::numeric_limits<int>::min();
    int N = std::numeric_limits<int>::min();
    int max_iter = std::numeric_limits<int>::min();
    local_scalar_t__ left = DUMMY_VAR__;
    local_scalar_t__ right = DUMMY_VAR__;
    int left_ind = std::numeric_limits<int>::min();
    int right_ind = std::numeric_limits<int>::min();
    int iter = std::numeric_limits<int>::min();
    current_statement__ = 113;
    N = stan::math::num_elements(sorted);
    current_statement__ = 115;
    if (stan::math::logical_eq(N, 0)) {
      current_statement__ = 114;
      return 0;
    }
    current_statement__ = 116;
    left_ind = start_ind;
    current_statement__ = 117;
    right_ind = N;
    current_statement__ = 118;
    max_iter = (100 * N);
    current_statement__ = 119;
    left = (stan::model::rvalue(sorted, "sorted",
              stan::model::index_uni(left_ind))
      - x);
    current_statement__ = 120;
    right = (stan::model::rvalue(sorted, "sorted",
               stan::model::index_uni(right_ind))
      - x);
    current_statement__ = 122;
    if (stan::math::logical_lte(0, left)) {
      current_statement__ = 121;
      return (left_ind - 1);
    }
    current_statement__ = 124;
    if (stan::math::logical_eq(0, right)) {
      current_statement__ = 123;
      return (N - 1);
    }
    current_statement__ = 126;
    if (stan::math::logical_gt(0, right)) {
      current_statement__ = 125;
      return N;
    }
    current_statement__ = 127;
    iter = 1;
    current_statement__ = 144;
    while ((stan::math::primitive_value(
              stan::math::logical_gt((right_ind - left_ind), 1))
           &&
           stan::math::primitive_value(
             stan::math::logical_neq(iter, max_iter)))) {
      int mid_ind = std::numeric_limits<int>::min();
      local_scalar_t__ mid = DUMMY_VAR__;
      current_statement__ = 130;
      mid_ind = ((left_ind + right_ind) / 2);
      current_statement__ = 131;
      mid = (stan::model::rvalue(sorted, "sorted",
               stan::model::index_uni(mid_ind))
        - x);
      current_statement__ = 133;
      if (stan::math::logical_eq(mid, 0)) {
        current_statement__ = 132;
        return (mid_ind - 1);
      }
      current_statement__ = 137;
      if (stan::math::logical_lt((left * mid), 0)) {
        current_statement__ = 134;
        right = mid;
        current_statement__ = 135;
        right_ind = mid_ind;
      }
      current_statement__ = 141;
      if (stan::math::logical_lt((right * mid), 0)) {
        current_statement__ = 138;
        left = mid;
        current_statement__ = 139;
        left_ind = mid_ind;
      }
      current_statement__ = 142;
      iter = (iter + 1);
    }
    current_statement__ = 146;
    if (stan::math::logical_eq(iter, max_iter)) {
      current_statement__ = 145;
      if (pstream__) {
        stan::math::stan_print(pstream__,
          "Maximum number of iterations reached.");
        *(pstream__) << std::endl;
      }
    }
    current_statement__ = 147;
    return left_ind;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
linearInterp(const T0__& t_x, const T1__& t_before, const T2__& t_after,
             const T3__& y_before, const T4__& y_after, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ linInterp_hat = DUMMY_VAR__;
    current_statement__ = 150;
    linInterp_hat = (y_before + (((t_x - t_before) * (y_after - y_before)) /
      (t_after - t_before)));
    current_statement__ = 151;
    return linInterp_hat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic_2_lpdf(const T0__& y_hat, const T1__& mw, const T2__& beta,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 153;
    return (((stan::math::log(beta) - stan::math::log(mw)) + ((beta - 1) *
           (stan::math::log(y_hat) - stan::math::log(mw)))) - (2 *
           stan::math::log1p_exp((beta * (stan::math::log(y_hat) -
             stan::math::log(mw))))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic_2_lcdf(const T0__& y_hat, const T1__& mw, const T2__& beta,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 155;
    return -stan::math::log1p_exp((-beta * (stan::math::log(y_hat) -
              stan::math::log(mw))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic_2_lccdf(const T0__& y_hat, const T1__& mw, const T2__& beta,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 157;
    return -stan::math::log1p_exp((beta * (stan::math::log(y_hat) -
              stan::math::log(mw))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>,-1,1>
TKTD_varIT(const T0__& t, const T1__& y_arg__, const std::vector<T2__>&
           theta, const std::vector<T3__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__, T3__>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ kd = DUMMY_VAR__;
    current_statement__ = 159;
    kd = stan::model::rvalue(theta, "theta", stan::model::index_uni(1));
    Eigen::Matrix<local_scalar_t__,-1,1> dy_dt =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
    int Nconc = std::numeric_limits<int>::min();
    current_statement__ = 161;
    Nconc = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(1));
    current_statement__ = 162;
    stan::math::validate_non_negative_index("tconc", "Nconc", Nconc);
    Eigen::Matrix<local_scalar_t__,-1,1> tconc =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nconc, DUMMY_VAR__);
    current_statement__ = 163;
    stan::model::assign(tconc,
      stan::math::to_vector(
        stan::model::rvalue(x_r, "x_r", stan::model::index_min_max(1, Nconc))),
      "assigning variable tconc");
    current_statement__ = 164;
    stan::math::validate_non_negative_index("conc", "Nconc", Nconc);
    Eigen::Matrix<local_scalar_t__,-1,1> conc =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nconc, DUMMY_VAR__);
    current_statement__ = 165;
    stan::model::assign(conc,
      stan::math::to_vector(
        stan::model::rvalue(x_r, "x_r",
          stan::model::index_min_max((Nconc + 1), (2 * Nconc)))),
      "assigning variable conc");
    int pulse_index = std::numeric_limits<int>::min();
    current_statement__ = 166;
    pulse_index = find_interval_elem(t, tconc, 1, pstream__);
    local_scalar_t__ conc_linInterp = DUMMY_VAR__;
    current_statement__ = 167;
    conc_linInterp = (stan::math::logical_neq(pulse_index, 0) ? linearInterp(
                                                                  t,
                                                                  stan::model::rvalue(
                                                                    tconc,
                                                                    "tconc",
                                                                    stan::model::index_uni(
                                                                    pulse_index)),
                                                                  stan::model::rvalue(
                                                                    tconc,
                                                                    "tconc",
                                                                    stan::model::index_uni(
                                                                    (pulse_index
                                                                    + 1))),
                                                                  stan::model::rvalue(
                                                                    conc,
                                                                    "conc",
                                                                    stan::model::index_uni(
                                                                    pulse_index)),
                                                                  stan::model::rvalue(
                                                                    conc,
                                                                    "conc",
                                                                    stan::model::index_uni(
                                                                    (pulse_index
                                                                    + 1))),
                                                                  pstream__) : 
      stan::model::rvalue(conc, "conc", stan::model::index_uni(1)));
    current_statement__ = 168;
    stan::model::assign(dy_dt, (kd * (conc_linInterp -
      stan::model::rvalue(y, "y", stan::model::index_uni(1)))),
      "assigning variable dy_dt", stan::model::index_uni(1));
    current_statement__ = 169;
    return dy_dt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>,-1,-1>
solve_TKTD_varIT(const std::vector<T0__>& y0, const T1__& t0,
                 const std::vector<T2__>& ts, const std::vector<T3__>& theta,
                 const std::vector<double>& tconc, const std::vector<double>&
                 conc, const double& relTol, const double& absTol, const int&
                 maxSteps, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    std::vector<int> x_i =
      std::vector<int>(1, std::numeric_limits<int>::min());
    current_statement__ = 172;
    stan::model::assign(x_i, stan::math::size(tconc),
      "assigning variable x_i", stan::model::index_uni(1));
    current_statement__ = 173;
    stan::math::validate_non_negative_index("ode_res", "size(ts)",
      stan::math::size(ts));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ode_res =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(ts),
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__));
    current_statement__ = 174;
    stan::model::assign(ode_res,
      stan::math::ode_rk45_tol(TKTD_varIT_variadic2_functor__(),
        stan::math::to_vector(y0), t0, ts, relTol, absTol, maxSteps,
        pstream__, theta,
        stan::math::to_array_1d(
          stan::math::append_row(stan::math::to_vector(tconc),
            stan::math::to_vector(conc))), x_i), "assigning variable ode_res");
    current_statement__ = 175;
    stan::math::validate_non_negative_index("rtn", "size(ts)",
      stan::math::size(ts));
    Eigen::Matrix<local_scalar_t__,-1,-1> rtn =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::size(ts),
        1, DUMMY_VAR__);
    current_statement__ = 179;
    for (int i = 1; i <= stan::math::size(ts); ++i) {
      current_statement__ = 177;
      stan::model::assign(rtn,
        stan::math::transpose(
          stan::model::rvalue(ode_res, "ode_res", stan::model::index_uni(i))),
        "assigning variable rtn", stan::model::index_uni(i));
    }
    current_statement__ = 180;
    return rtn;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_GUTS_IT final : public model_base_crtp<model_GUTS_IT> {
private:
  int nDatasets;
  int nGroup;
  std::vector<int> groupDataset;
  int nData_conc;
  std::vector<double> conc;
  std::vector<double> tconc;
  std::vector<int> idC_lw;
  std::vector<int> idC_up;
  int nData_Nsurv;
  std::vector<int> Nsurv;
  std::vector<int> Nprec;
  std::vector<double> tNsurv;
  std::vector<int> idS_lw;
  std::vector<int> idS_up;
  double hbMean_log10;
  double hbSD_log10;
  double kdMean_log10;
  double kdSD_log10;
  double relTol;
  double absTol;
  int maxSteps;
  int distribution;
  double mwMean_log10;
  double mwSD_log10;
  double betaMin_log10;
  double betaMax_log10;
  std::vector<double> y0;
  std::vector<double> tNsurv_ode;
  std::vector<double> tconc_ode;
  int sigma_1dim__;
public:
  ~model_GUTS_IT() {}
  model_GUTS_IT(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_GUTS_IT_namespace::model_GUTS_IT";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 46;
      context__.validate_dims("data initialization", "nDatasets", "int",
        std::vector<size_t>{});
      nDatasets = std::numeric_limits<int>::min();
      current_statement__ = 46;
      nDatasets = context__.vals_i("nDatasets")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "nDatasets", nDatasets,
        1);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "nGroup", "int",
        std::vector<size_t>{});
      nGroup = std::numeric_limits<int>::min();
      current_statement__ = 47;
      nGroup = context__.vals_i("nGroup")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "nGroup", nGroup, 1);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("groupDataset", "nGroup",
        nGroup);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "groupDataset", "int",
        std::vector<size_t>{static_cast<size_t>(nGroup)});
      groupDataset = std::vector<int>(nGroup,
                       std::numeric_limits<int>::min());
      current_statement__ = 49;
      groupDataset = context__.vals_i("groupDataset");
      current_statement__ = 50;
      context__.validate_dims("data initialization", "nData_conc", "int",
        std::vector<size_t>{});
      nData_conc = std::numeric_limits<int>::min();
      current_statement__ = 50;
      nData_conc = context__.vals_i("nData_conc")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "nData_conc",
        nData_conc, 1);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("conc", "nData_conc",
        nData_conc);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "conc", "double",
        std::vector<size_t>{static_cast<size_t>(nData_conc)});
      conc = std::vector<double>(nData_conc,
               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 52;
      conc = context__.vals_r("conc");
      current_statement__ = 53;
      stan::math::validate_non_negative_index("tconc", "nData_conc",
        nData_conc);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "tconc", "double",
        std::vector<size_t>{static_cast<size_t>(nData_conc)});
      tconc = std::vector<double>(nData_conc,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 54;
      tconc = context__.vals_r("tconc");
      current_statement__ = 55;
      stan::math::validate_non_negative_index("idC_lw", "nGroup", nGroup);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "idC_lw", "int",
        std::vector<size_t>{static_cast<size_t>(nGroup)});
      idC_lw = std::vector<int>(nGroup, std::numeric_limits<int>::min());
      current_statement__ = 56;
      idC_lw = context__.vals_i("idC_lw");
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "idC_lw", idC_lw, 1);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("idC_up", "nGroup", nGroup);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "idC_up", "int",
        std::vector<size_t>{static_cast<size_t>(nGroup)});
      idC_up = std::vector<int>(nGroup, std::numeric_limits<int>::min());
      current_statement__ = 58;
      idC_up = context__.vals_i("idC_up");
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "idC_up", idC_up, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "nData_Nsurv", "int",
        std::vector<size_t>{});
      nData_Nsurv = std::numeric_limits<int>::min();
      current_statement__ = 59;
      nData_Nsurv = context__.vals_i("nData_Nsurv")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "nData_Nsurv",
        nData_Nsurv, 1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("Nsurv", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "Nsurv", "int",
        std::vector<size_t>{static_cast<size_t>(nData_Nsurv)});
      Nsurv = std::vector<int>(nData_Nsurv, std::numeric_limits<int>::min());
      current_statement__ = 61;
      Nsurv = context__.vals_i("Nsurv");
      current_statement__ = 62;
      stan::math::validate_non_negative_index("Nprec", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "Nprec", "int",
        std::vector<size_t>{static_cast<size_t>(nData_Nsurv)});
      Nprec = std::vector<int>(nData_Nsurv, std::numeric_limits<int>::min());
      current_statement__ = 63;
      Nprec = context__.vals_i("Nprec");
      current_statement__ = 64;
      stan::math::validate_non_negative_index("tNsurv", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "tNsurv", "double",
        std::vector<size_t>{static_cast<size_t>(nData_Nsurv)});
      tNsurv = std::vector<double>(nData_Nsurv,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 65;
      tNsurv = context__.vals_r("tNsurv");
      current_statement__ = 66;
      stan::math::validate_non_negative_index("idS_lw", "nGroup", nGroup);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "idS_lw", "int",
        std::vector<size_t>{static_cast<size_t>(nGroup)});
      idS_lw = std::vector<int>(nGroup, std::numeric_limits<int>::min());
      current_statement__ = 67;
      idS_lw = context__.vals_i("idS_lw");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "idS_lw", idS_lw, 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("idS_up", "nGroup", nGroup);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "idS_up", "int",
        std::vector<size_t>{static_cast<size_t>(nGroup)});
      idS_up = std::vector<int>(nGroup, std::numeric_limits<int>::min());
      current_statement__ = 69;
      idS_up = context__.vals_i("idS_up");
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "idS_up", idS_up, 1);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "hbMean_log10",
        "double", std::vector<size_t>{});
      hbMean_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 70;
      hbMean_log10 = context__.vals_r("hbMean_log10")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization", "hbSD_log10", "double",
        std::vector<size_t>{});
      hbSD_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 71;
      hbSD_log10 = context__.vals_r("hbSD_log10")[(1 - 1)];
      current_statement__ = 72;
      context__.validate_dims("data initialization", "kdMean_log10",
        "double", std::vector<size_t>{});
      kdMean_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 72;
      kdMean_log10 = context__.vals_r("kdMean_log10")[(1 - 1)];
      current_statement__ = 73;
      context__.validate_dims("data initialization", "kdSD_log10", "double",
        std::vector<size_t>{});
      kdSD_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 73;
      kdSD_log10 = context__.vals_r("kdSD_log10")[(1 - 1)];
      current_statement__ = 74;
      context__.validate_dims("data initialization", "relTol", "double",
        std::vector<size_t>{});
      relTol = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 74;
      relTol = context__.vals_r("relTol")[(1 - 1)];
      current_statement__ = 75;
      context__.validate_dims("data initialization", "absTol", "double",
        std::vector<size_t>{});
      absTol = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 75;
      absTol = context__.vals_r("absTol")[(1 - 1)];
      current_statement__ = 76;
      context__.validate_dims("data initialization", "maxSteps", "int",
        std::vector<size_t>{});
      maxSteps = std::numeric_limits<int>::min();
      current_statement__ = 76;
      maxSteps = context__.vals_i("maxSteps")[(1 - 1)];
      current_statement__ = 77;
      context__.validate_dims("data initialization", "distribution", "int",
        std::vector<size_t>{});
      distribution = std::numeric_limits<int>::min();
      current_statement__ = 77;
      distribution = context__.vals_i("distribution")[(1 - 1)];
      current_statement__ = 78;
      context__.validate_dims("data initialization", "mwMean_log10",
        "double", std::vector<size_t>{});
      mwMean_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 78;
      mwMean_log10 = context__.vals_r("mwMean_log10")[(1 - 1)];
      current_statement__ = 79;
      context__.validate_dims("data initialization", "mwSD_log10", "double",
        std::vector<size_t>{});
      mwSD_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 79;
      mwSD_log10 = context__.vals_r("mwSD_log10")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization", "betaMin_log10",
        "double", std::vector<size_t>{});
      betaMin_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 80;
      betaMin_log10 = context__.vals_r("betaMin_log10")[(1 - 1)];
      current_statement__ = 81;
      context__.validate_dims("data initialization", "betaMax_log10",
        "double", std::vector<size_t>{});
      betaMax_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 81;
      betaMax_log10 = context__.vals_r("betaMax_log10")[(1 - 1)];
      current_statement__ = 82;
      y0 = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 83;
      stan::math::validate_non_negative_index("tNsurv_ode", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 84;
      tNsurv_ode = std::vector<double>(nData_Nsurv,
                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 85;
      stan::math::validate_non_negative_index("tconc_ode", "nData_conc",
        nData_conc);
      current_statement__ = 86;
      tconc_ode = std::vector<double>(nData_conc,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 87;
      stan::model::assign(y0, 1e-20, "assigning variable y0",
        stan::model::index_uni(1));
      current_statement__ = 93;
      for (int gr = 1; gr <= nGroup; ++gr) {
        current_statement__ = 88;
        stan::model::assign(tNsurv_ode,
          stan::model::rvalue(tNsurv, "tNsurv",
            stan::model::index_min_max(
              stan::model::rvalue(idS_lw, "idS_lw",
                stan::model::index_uni(gr)),
              stan::model::rvalue(idS_up, "idS_up",
                stan::model::index_uni(gr)))),
          "assigning variable tNsurv_ode",
          stan::model::index_min_max(
            stan::model::rvalue(idS_lw, "idS_lw", stan::model::index_uni(gr)),
            stan::model::rvalue(idS_up, "idS_up", stan::model::index_uni(gr))));
        current_statement__ = 89;
        stan::model::assign(tNsurv_ode,
          (stan::model::rvalue(tNsurv, "tNsurv",
             stan::model::index_uni(
               stan::model::rvalue(idS_lw, "idS_lw",
                 stan::model::index_uni(gr)))) + 1e-9),
          "assigning variable tNsurv_ode",
          stan::model::index_uni(
            stan::model::rvalue(idS_lw, "idS_lw", stan::model::index_uni(gr))));
        current_statement__ = 90;
        stan::model::assign(tconc_ode,
          stan::model::rvalue(tconc, "tconc",
            stan::model::index_min_max(
              stan::model::rvalue(idC_lw, "idC_lw",
                stan::model::index_uni(gr)),
              stan::model::rvalue(idC_up, "idC_up",
                stan::model::index_uni(gr)))),
          "assigning variable tconc_ode",
          stan::model::index_min_max(
            stan::model::rvalue(idC_lw, "idC_lw", stan::model::index_uni(gr)),
            stan::model::rvalue(idC_up, "idC_up", stan::model::index_uni(gr))));
        current_statement__ = 91;
        stan::model::assign(tconc_ode,
          (stan::model::rvalue(tconc, "tconc",
             stan::model::index_uni(
               stan::model::rvalue(idC_lw, "idC_lw",
                 stan::model::index_uni(gr)))) + 1e-9),
          "assigning variable tconc_ode",
          stan::model::index_uni(
            stan::model::rvalue(idC_lw, "idC_lw", stan::model::index_uni(gr))));
      }
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "y0", y0, 0);
      current_statement__ = 94;
      sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 94;
      sigma_1dim__ = (2 + nDatasets);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("sigma", "2 + nDatasets",
        sigma_1dim__);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("hb_log10", "nDatasets",
        nDatasets);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("param", "1", 1);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("y_hat", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("y_hat", "1", 1);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("Psurv_hat", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("Conditional_Psurv_hat",
        "nData_Nsurv", nData_Nsurv);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("Nsurv_ppc", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("Nsurv_sim", "nData_Nsurv",
        nData_Nsurv);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("Nsurv_sim_prec",
        "nData_Nsurv", nData_Nsurv);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("log_lik", "nData_Nsurv",
        nData_Nsurv);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + sigma_1dim__;
  }
  inline std::string model_name() const final {
    return "model_GUTS_IT";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_GUTS_IT_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ beta_log10 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_log10 = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read<std::vector<local_scalar_t__>>(sigma_1dim__);
      local_scalar_t__ kd_log10 = DUMMY_VAR__;
      current_statement__ = 3;
      kd_log10 = (kdMean_log10 + (kdSD_log10 *
        stan::model::rvalue(sigma, "sigma", stan::model::index_uni(1))));
      local_scalar_t__ mw_log10 = DUMMY_VAR__;
      current_statement__ = 4;
      mw_log10 = (mwMean_log10 + (mwSD_log10 *
        stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2))));
      std::vector<local_scalar_t__> hb_log10 =
        std::vector<local_scalar_t__>(nDatasets, DUMMY_VAR__);
      std::vector<local_scalar_t__> param =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> y_hat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nData_Nsurv, 1,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> Psurv_hat =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nData_Nsurv,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> Conditional_Psurv_hat =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nData_Nsurv,
          DUMMY_VAR__);
      local_scalar_t__ mw = DUMMY_VAR__;
      current_statement__ = 10;
      mw = stan::math::pow(10, mw_log10);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 11;
      beta = stan::math::pow(10, beta_log10);
      current_statement__ = 18;
      for (int i = 1; i <= nDatasets; ++i) {
        current_statement__ = 16;
        stan::model::assign(hb_log10, (hbMean_log10 + (hbSD_log10 *
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni((2 + i))))),
          "assigning variable hb_log10", stan::model::index_uni(i));
      }
      current_statement__ = 19;
      stan::model::assign(param, stan::math::pow(10, kd_log10),
        "assigning variable param", stan::model::index_uni(1));
      current_statement__ = 32;
      for (int gr = 1; gr <= nGroup; ++gr) {
        local_scalar_t__ hb = DUMMY_VAR__;
        current_statement__ = 20;
        hb = stan::math::pow(10,
               stan::model::rvalue(hb_log10, "hb_log10",
                 stan::model::index_uni(
                   stan::model::rvalue(groupDataset, "groupDataset",
                     stan::model::index_uni(gr)))));
        current_statement__ = 21;
        stan::model::assign(y_hat,
          stan::model::rvalue(
            solve_TKTD_varIT(y0, static_cast<double>(0),
              stan::model::rvalue(tNsurv_ode, "tNsurv_ode",
                stan::model::index_min_max(
                  stan::model::rvalue(idS_lw, "idS_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idS_up, "idS_up",
                    stan::model::index_uni(gr)))), param,
              stan::model::rvalue(tconc_ode, "tconc_ode",
                stan::model::index_min_max(
                  stan::model::rvalue(idC_lw, "idC_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idC_up, "idC_up",
                    stan::model::index_uni(gr)))),
              stan::model::rvalue(conc, "conc",
                stan::model::index_min_max(
                  stan::model::rvalue(idC_lw, "idC_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idC_up, "idC_up",
                    stan::model::index_uni(gr)))), relTol, absTol, maxSteps,
              pstream__),
            "solve_TKTD_varIT(y0, promote(0, real), tNsurv_ode[idS_lw[gr]:idS_up[gr]],\nparam, tconc_ode[idC_lw[gr]:idC_up[gr]], conc[idC_lw[gr]:idC_up[gr]], relTol,\nabsTol,\nmaxSteps)",
            stan::model::index_omni(), stan::model::index_uni(1)),
          "assigning variable y_hat",
          stan::model::index_min_max(
            stan::model::rvalue(idS_lw, "idS_lw", stan::model::index_uni(gr)),
            stan::model::rvalue(idS_up, "idS_up", stan::model::index_uni(gr))),
          stan::model::index_uni(1));
        current_statement__ = 30;
        for (int i =
               stan::model::rvalue(idS_lw, "idS_lw",
                 stan::model::index_uni(gr)); i <=
             stan::model::rvalue(idS_up, "idS_up", stan::model::index_uni(gr)); ++i) {
          current_statement__ = 24;
          if (stan::math::logical_eq(distribution, 1)) {
            current_statement__ = 22;
            stan::model::assign(Psurv_hat,
              (stan::math::exp((-hb *
                 stan::model::rvalue(tNsurv_ode, "tNsurv_ode",
                   stan::model::index_uni(i)))) * (1 -
              stan::math::exp(
                loglogistic_2_lcdf(
                  stan::math::max(
                    stan::model::rvalue(y_hat, "y_hat",
                      stan::model::index_min_max(
                        stan::model::rvalue(idS_lw, "idS_lw",
                          stan::model::index_uni(gr)), i),
                      stan::model::index_uni(1))), mw, beta, pstream__)))),
              "assigning variable Psurv_hat", stan::model::index_uni(i));
          }
          current_statement__ = 27;
          if (stan::math::logical_eq(distribution, 2)) {
            current_statement__ = 25;
            stan::model::assign(Psurv_hat,
              (stan::math::exp((-hb *
                 stan::model::rvalue(tNsurv_ode, "tNsurv_ode",
                   stan::model::index_uni(i)))) * (1 -
              stan::math::exp(
                stan::math::lognormal_lcdf(
                  stan::math::max(
                    stan::model::rvalue(y_hat, "y_hat",
                      stan::model::index_min_max(
                        stan::model::rvalue(idS_lw, "idS_lw",
                          stan::model::index_uni(gr)), i),
                      stan::model::index_uni(1))), mw, beta)))),
              "assigning variable Psurv_hat", stan::model::index_uni(i));
          }
          current_statement__ = 28;
          stan::model::assign(Conditional_Psurv_hat,
            (stan::math::logical_eq(i,
               stan::model::rvalue(idS_lw, "idS_lw",
                 stan::model::index_uni(gr))) ? stan::model::rvalue(
                                                  Psurv_hat, "Psurv_hat",
                                                  stan::model::index_uni(i)) : (
            stan::model::rvalue(Psurv_hat, "Psurv_hat",
              stan::model::index_uni(i)) /
            stan::model::rvalue(Psurv_hat, "Psurv_hat",
              stan::model::index_uni((i - 1))))),
            "assigning variable Conditional_Psurv_hat",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "param", param, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "Psurv_hat", Psurv_hat,
        0);
      current_statement__ = 8;
      stan::math::check_less_or_equal(function__, "Psurv_hat", Psurv_hat, 1);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "Conditional_Psurv_hat",
        Conditional_Psurv_hat, 0);
      current_statement__ = 9;
      stan::math::check_less_or_equal(function__, "Conditional_Psurv_hat",
        Conditional_Psurv_hat, 1);
      {
        current_statement__ = 41;
        lp_accum__.add(stan::math::uniform_lpdf<false>(beta_log10,
                         betaMin_log10, betaMax_log10));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<false>(sigma, 0, 1));
        current_statement__ = 45;
        for (int gr = 1; gr <= nGroup; ++gr) {
          current_statement__ = 43;
          lp_accum__.add(stan::math::binomial_lpmf<false>(
                           stan::model::rvalue(Nsurv, "Nsurv",
                             stan::model::index_min_max(
                               stan::model::rvalue(idS_lw, "idS_lw",
                                 stan::model::index_uni(gr)),
                               stan::model::rvalue(idS_up, "idS_up",
                                 stan::model::index_uni(gr)))),
                           stan::model::rvalue(Nprec, "Nprec",
                             stan::model::index_min_max(
                               stan::model::rvalue(idS_lw, "idS_lw",
                                 stan::model::index_uni(gr)),
                               stan::model::rvalue(idS_up, "idS_up",
                                 stan::model::index_uni(gr)))),
                           stan::model::rvalue(Conditional_Psurv_hat,
                             "Conditional_Psurv_hat",
                             stan::model::index_min_max(
                               stan::model::rvalue(idS_lw, "idS_lw",
                                 stan::model::index_uni(gr)),
                               stan::model::rvalue(idS_up, "idS_up",
                                 stan::model::index_uni(gr))))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_GUTS_IT_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double beta_log10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      beta_log10 = in__.template read<local_scalar_t__>();
      std::vector<double> sigma =
        std::vector<double>(sigma_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma = in__.template read<std::vector<local_scalar_t__>>(sigma_1dim__);
      double kd_log10 = std::numeric_limits<double>::quiet_NaN();
      double mw_log10 = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> hb_log10 =
        std::vector<double>(nDatasets,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> param =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> y_hat =
        Eigen::Matrix<double,-1,-1>::Constant(nData_Nsurv, 1,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Psurv_hat =
        Eigen::Matrix<double,-1,1>::Constant(nData_Nsurv,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Conditional_Psurv_hat =
        Eigen::Matrix<double,-1,1>::Constant(nData_Nsurv,
          std::numeric_limits<double>::quiet_NaN());
      double mw = std::numeric_limits<double>::quiet_NaN();
      double beta = std::numeric_limits<double>::quiet_NaN();
      out__.write(beta_log10);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 3;
      kd_log10 = (kdMean_log10 + (kdSD_log10 *
        stan::model::rvalue(sigma, "sigma", stan::model::index_uni(1))));
      current_statement__ = 4;
      mw_log10 = (mwMean_log10 + (mwSD_log10 *
        stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2))));
      current_statement__ = 10;
      mw = stan::math::pow(10, mw_log10);
      current_statement__ = 11;
      beta = stan::math::pow(10, beta_log10);
      current_statement__ = 18;
      for (int i = 1; i <= nDatasets; ++i) {
        current_statement__ = 16;
        stan::model::assign(hb_log10, (hbMean_log10 + (hbSD_log10 *
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni((2 + i))))),
          "assigning variable hb_log10", stan::model::index_uni(i));
      }
      current_statement__ = 19;
      stan::model::assign(param, stan::math::pow(10, kd_log10),
        "assigning variable param", stan::model::index_uni(1));
      current_statement__ = 32;
      for (int gr = 1; gr <= nGroup; ++gr) {
        double hb = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 20;
        hb = stan::math::pow(10,
               stan::model::rvalue(hb_log10, "hb_log10",
                 stan::model::index_uni(
                   stan::model::rvalue(groupDataset, "groupDataset",
                     stan::model::index_uni(gr)))));
        current_statement__ = 21;
        stan::model::assign(y_hat,
          stan::model::rvalue(
            solve_TKTD_varIT(y0, static_cast<double>(0),
              stan::model::rvalue(tNsurv_ode, "tNsurv_ode",
                stan::model::index_min_max(
                  stan::model::rvalue(idS_lw, "idS_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idS_up, "idS_up",
                    stan::model::index_uni(gr)))), param,
              stan::model::rvalue(tconc_ode, "tconc_ode",
                stan::model::index_min_max(
                  stan::model::rvalue(idC_lw, "idC_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idC_up, "idC_up",
                    stan::model::index_uni(gr)))),
              stan::model::rvalue(conc, "conc",
                stan::model::index_min_max(
                  stan::model::rvalue(idC_lw, "idC_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idC_up, "idC_up",
                    stan::model::index_uni(gr)))), relTol, absTol, maxSteps,
              pstream__),
            "solve_TKTD_varIT(y0, promote(0, real), tNsurv_ode[idS_lw[gr]:idS_up[gr]],\nparam, tconc_ode[idC_lw[gr]:idC_up[gr]], conc[idC_lw[gr]:idC_up[gr]], relTol,\nabsTol,\nmaxSteps)",
            stan::model::index_omni(), stan::model::index_uni(1)),
          "assigning variable y_hat",
          stan::model::index_min_max(
            stan::model::rvalue(idS_lw, "idS_lw", stan::model::index_uni(gr)),
            stan::model::rvalue(idS_up, "idS_up", stan::model::index_uni(gr))),
          stan::model::index_uni(1));
        current_statement__ = 30;
        for (int i =
               stan::model::rvalue(idS_lw, "idS_lw",
                 stan::model::index_uni(gr)); i <=
             stan::model::rvalue(idS_up, "idS_up", stan::model::index_uni(gr)); ++i) {
          current_statement__ = 24;
          if (stan::math::logical_eq(distribution, 1)) {
            current_statement__ = 22;
            stan::model::assign(Psurv_hat,
              (stan::math::exp((-hb *
                 stan::model::rvalue(tNsurv_ode, "tNsurv_ode",
                   stan::model::index_uni(i)))) * (1 -
              stan::math::exp(
                loglogistic_2_lcdf(
                  stan::math::max(
                    stan::model::rvalue(y_hat, "y_hat",
                      stan::model::index_min_max(
                        stan::model::rvalue(idS_lw, "idS_lw",
                          stan::model::index_uni(gr)), i),
                      stan::model::index_uni(1))), mw, beta, pstream__)))),
              "assigning variable Psurv_hat", stan::model::index_uni(i));
          }
          current_statement__ = 27;
          if (stan::math::logical_eq(distribution, 2)) {
            current_statement__ = 25;
            stan::model::assign(Psurv_hat,
              (stan::math::exp((-hb *
                 stan::model::rvalue(tNsurv_ode, "tNsurv_ode",
                   stan::model::index_uni(i)))) * (1 -
              stan::math::exp(
                stan::math::lognormal_lcdf(
                  stan::math::max(
                    stan::model::rvalue(y_hat, "y_hat",
                      stan::model::index_min_max(
                        stan::model::rvalue(idS_lw, "idS_lw",
                          stan::model::index_uni(gr)), i),
                      stan::model::index_uni(1))), mw, beta)))),
              "assigning variable Psurv_hat", stan::model::index_uni(i));
          }
          current_statement__ = 28;
          stan::model::assign(Conditional_Psurv_hat,
            (stan::math::logical_eq(i,
               stan::model::rvalue(idS_lw, "idS_lw",
                 stan::model::index_uni(gr))) ? stan::model::rvalue(
                                                  Psurv_hat, "Psurv_hat",
                                                  stan::model::index_uni(i)) : (
            stan::model::rvalue(Psurv_hat, "Psurv_hat",
              stan::model::index_uni(i)) /
            stan::model::rvalue(Psurv_hat, "Psurv_hat",
              stan::model::index_uni((i - 1))))),
            "assigning variable Conditional_Psurv_hat",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "param", param, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "Psurv_hat", Psurv_hat,
        0);
      current_statement__ = 8;
      stan::math::check_less_or_equal(function__, "Psurv_hat", Psurv_hat, 1);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "Conditional_Psurv_hat",
        Conditional_Psurv_hat, 0);
      current_statement__ = 9;
      stan::math::check_less_or_equal(function__, "Conditional_Psurv_hat",
        Conditional_Psurv_hat, 1);
      if (emit_transformed_parameters__) {
        out__.write(kd_log10);
        out__.write(mw_log10);
        out__.write(hb_log10);
        out__.write(param);
        out__.write(y_hat);
        out__.write(Psurv_hat);
        out__.write(Conditional_Psurv_hat);
        out__.write(mw);
        out__.write(beta);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<int> Nsurv_ppc =
        std::vector<int>(nData_Nsurv, std::numeric_limits<int>::min());
      std::vector<int> Nsurv_sim =
        std::vector<int>(nData_Nsurv, std::numeric_limits<int>::min());
      std::vector<int> Nsurv_sim_prec =
        std::vector<int>(nData_Nsurv, std::numeric_limits<int>::min());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(nData_Nsurv,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 40;
      for (int gr = 1; gr <= nGroup; ++gr) {
        current_statement__ = 38;
        for (int i =
               stan::model::rvalue(idS_lw, "idS_lw",
                 stan::model::index_uni(gr)); i <=
             stan::model::rvalue(idS_up, "idS_up", stan::model::index_uni(gr)); ++i) {
          current_statement__ = 33;
          stan::model::assign(Nsurv_ppc,
            stan::math::binomial_rng(
              stan::model::rvalue(Nprec, "Nprec", stan::model::index_uni(i)),
              stan::model::rvalue(Conditional_Psurv_hat,
                "Conditional_Psurv_hat", stan::model::index_uni(i)),
              base_rng__), "assigning variable Nsurv_ppc",
            stan::model::index_uni(i));
          current_statement__ = 34;
          stan::model::assign(Nsurv_sim_prec,
            (stan::math::logical_eq(i,
               stan::model::rvalue(idS_lw, "idS_lw",
                 stan::model::index_uni(gr))) ? stan::model::rvalue(Nprec,
                                                  "Nprec",
                                                  stan::model::index_uni(i)) : 
            stan::model::rvalue(Nsurv_sim, "Nsurv_sim",
              stan::model::index_uni((i - 1)))),
            "assigning variable Nsurv_sim_prec", stan::model::index_uni(i));
          current_statement__ = 35;
          stan::model::assign(Nsurv_sim,
            stan::math::binomial_rng(
              stan::model::rvalue(Nsurv_sim_prec, "Nsurv_sim_prec",
                stan::model::index_uni(i)),
              stan::model::rvalue(Conditional_Psurv_hat,
                "Conditional_Psurv_hat", stan::model::index_uni(i)),
              base_rng__), "assigning variable Nsurv_sim",
            stan::model::index_uni(i));
          current_statement__ = 36;
          stan::model::assign(log_lik,
            stan::math::binomial_lpmf<false>(
              stan::model::rvalue(Nsurv, "Nsurv",
                stan::model::index_min_max(
                  stan::model::rvalue(idS_lw, "idS_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idS_up, "idS_up",
                    stan::model::index_uni(gr)))),
              stan::model::rvalue(Nprec, "Nprec",
                stan::model::index_min_max(
                  stan::model::rvalue(idS_lw, "idS_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idS_up, "idS_up",
                    stan::model::index_uni(gr)))),
              stan::model::rvalue(Conditional_Psurv_hat,
                "Conditional_Psurv_hat",
                stan::model::index_min_max(
                  stan::model::rvalue(idS_lw, "idS_lw",
                    stan::model::index_uni(gr)),
                  stan::model::rvalue(idS_up, "idS_up",
                    stan::model::index_uni(gr))))),
            "assigning variable log_lik", stan::model::index_uni(i));
        }
      }
      out__.write(Nsurv_ppc);
      out__.write(Nsurv_sim);
      out__.write(Nsurv_sim_prec);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ beta_log10 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_log10 = in__.read<local_scalar_t__>();
      out__.write(beta_log10);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(sigma_1dim__),
        "assigning variable sigma");
      out__.write(sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_log10",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(sigma_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ beta_log10 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_log10 = context__.vals_r("beta_log10")[(1 - 1)];
      out__.write(beta_log10);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = context__.vals_r("sigma");
      out__.write(sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_log10", "sigma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"kd_log10", "mw_log10", "hb_log10", "param", "y_hat",
             "Psurv_hat", "Conditional_Psurv_hat", "mw", "beta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"Nsurv_ppc", "Nsurv_sim", "Nsurv_sim_prec", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(sigma_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(nDatasets)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(nData_Nsurv),
               static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(nData_Nsurv)},
             std::vector<size_t>{static_cast<size_t>(nData_Nsurv)},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(nData_Nsurv)},
             std::vector<size_t>{static_cast<size_t>(nData_Nsurv)},
             std::vector<size_t>{static_cast<size_t>(nData_Nsurv)},
             std::vector<size_t>{static_cast<size_t>(nData_Nsurv)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta_log10");
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "kd_log10");
      param_names__.emplace_back(std::string() + "mw_log10");
      for (int sym1__ = 1; sym1__ <= nDatasets; ++sym1__) {
        param_names__.emplace_back(std::string() + "hb_log10" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "param" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nData_Nsurv; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Psurv_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Conditional_Psurv_hat" +
          '.' + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "mw");
      param_names__.emplace_back(std::string() + "beta");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Nsurv_ppc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Nsurv_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Nsurv_sim_prec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta_log10");
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "kd_log10");
      param_names__.emplace_back(std::string() + "mw_log10");
      for (int sym1__ = 1; sym1__ <= nDatasets; ++sym1__) {
        param_names__.emplace_back(std::string() + "hb_log10" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "param" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nData_Nsurv; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Psurv_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Conditional_Psurv_hat" +
          '.' + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "mw");
      param_names__.emplace_back(std::string() + "beta");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Nsurv_ppc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Nsurv_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "Nsurv_sim_prec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nData_Nsurv; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_log10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"kd_log10\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mw_log10\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"hb_log10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nDatasets) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nData_Nsurv) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Psurv_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData_Nsurv) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Conditional_Psurv_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData_Nsurv) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mw\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Nsurv_ppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nData_Nsurv) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nsurv_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nData_Nsurv) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nsurv_sim_prec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nData_Nsurv) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData_Nsurv) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_log10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"kd_log10\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mw_log10\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"hb_log10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nDatasets) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nData_Nsurv) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Psurv_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData_Nsurv) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Conditional_Psurv_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData_Nsurv) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mw\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Nsurv_ppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nData_Nsurv) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nsurv_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nData_Nsurv) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nsurv_sim_prec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nData_Nsurv) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData_Nsurv) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + sigma_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (((((((((1 +
      1) + nDatasets) + 1) + (nData_Nsurv * 1)) + nData_Nsurv) + nData_Nsurv)
      + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((nData_Nsurv + nData_Nsurv) + nData_Nsurv) + nData_Nsurv));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + sigma_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (((((((((1 +
      1) + nDatasets) + 1) + (nData_Nsurv * 1)) + nData_Nsurv) + nData_Nsurv)
      + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((nData_Nsurv + nData_Nsurv) + nData_Nsurv) + nData_Nsurv));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_GUTS_IT_namespace::model_GUTS_IT;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_GUTS_IT_namespace::profiles__;
}
#endif
#endif
